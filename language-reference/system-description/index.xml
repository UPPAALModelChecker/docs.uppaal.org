<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>System Description on UPPAAL Documentation</title><link>/language-reference/system-description/</link><description>Recent content in System Description on UPPAAL Documentation</description><generator>Hugo</generator><language>en-us</language><atom:link href="/language-reference/system-description/index.xml" rel="self" type="application/rss+xml"/><item><title>Parameters</title><link>/language-reference/system-description/parameters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/parameters/</guid><description>&lt;p>Templates and functions are parameterised. The syntax for parameters is defined by the grammar for &lt;tt>Parameters&lt;/tt>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-EBNF" data-lang="EBNF">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Parameters &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::&lt;/span>&lt;span style="color:#f92672">=&lt;/span> [ &lt;span style="color:#66d9ef">Parameter &lt;/span>(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Parameter&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">*&lt;/span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Parameter &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> [&lt;span style="color:#66d9ef">Type&lt;/span>] [ &lt;span style="color:#e6db74">&amp;#39;&amp;amp;&amp;#39;&lt;/span> ] [&lt;span style="color:#66d9ef">ID&lt;/span>] [&lt;span style="color:#66d9ef">ArrayDecl&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In contrast to global and local declarations, the parameter list should not be terminated by a semicolon.&lt;/p>
&lt;h2 id="call-by-reference-and-call-by-value">Call by Reference and Call by Value&lt;/h2>
&lt;p>Parameters can be declared to have either call-by-value or call-by-reference semantics. The syntax is taken from C++, where the identifier of a call-by-reference parameter is prefixed with an ampersand in the parameter declaration. Call-by-value parameters are not prefixed with an ampersand.&lt;/p></description></item><item><title>Priorities</title><link>/language-reference/system-description/priorities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/priorities/</guid><description>&lt;p>Given some priority order on the transitions, the intuition is that, at a given time-point, a transition is enabled only if no higher priority transition is enabled (see also &lt;a href="../semantics/">Semantics&lt;/a>.) We say that the higher priority transition &lt;em>blocks&lt;/em> the lower priority transition.&lt;/p>
&lt;p>Priorities can be assigned to the channels and processes of a system. The priority orders defined in the system are translated into a priority order on tau-transitions and synchronizing transitions. &lt;em>Delay transitions are still non-deterministic&lt;/em> (unless urgent channels are used.)&lt;/p></description></item><item><title>Scope Rules</title><link>/language-reference/system-description/scope-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/scope-rules/</guid><description>&lt;p>The scope rules determine which element a name refers to in a given context. The context is either local (to a process template), or global (in a system description).&lt;/p>
&lt;p>In a local context, the names are always referring to local declarations or formal parameters (if the name is locally defined), otherwise to a globally declared name.&lt;/p>
&lt;p>In the global context, a name is always referring to a global declaration.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> There is only one name space in each context. This means that in each context all declared clocks, integer variables, constants, locations, and formal paramters must have unique names. However, local names may shadow globally declared names.&lt;/p></description></item><item><title>Semantics</title><link>/language-reference/system-description/semantics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/semantics/</guid><description>&lt;p>In the following we give a pseudo-formal semantics for UPPAAL. The semantics defines a timed transition system (&lt;em>S, s&lt;sub>0&lt;/sub>,&lt;/em> →) describing the behaviour of a network of extended timed automata. The set of states &lt;em>S&lt;/em> is defined as {(&lt;em>L, v&lt;/em>) | &lt;em>v ⊨ Inv&lt;/em>(&lt;em>L&lt;/em>)}, where &lt;em>L&lt;/em> is a location vector, &lt;em>v&lt;/em> is a function (called a &lt;em>valuation&lt;/em>) mapping integer variables and clocks to their values, and &lt;em>Inv&lt;/em> is a function mapping locations and location vectors to invariants. The initial state &lt;em>s&lt;sub>0&lt;/sub>&lt;/em> is the state where all processes are in the initial location, all variables have their initial value, and all clocks are zero. The transition relation, →, contains two kinds of transitions: delay transitions and action transitions. We will describe each type below.&lt;/p></description></item></channel></rss>