<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>System Description on UPPAAL Documentation</title><link>/language-reference/system-description/</link><description>Recent content in System Description on UPPAAL Documentation</description><generator>Hugo</generator><language>en-us</language><atom:link href="/language-reference/system-description/index.xml" rel="self" type="application/rss+xml"/><item><title>Parameters</title><link>/language-reference/system-description/parameters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/parameters/</guid><description>Templates and functions are parameterised. The syntax for parameters is defined by the grammar for Parameters:
Parameters ::= [ Parameter (&amp;#39;,&amp;#39; Parameter)* ] Parameter ::= [Type] [ &amp;#39;&amp;amp;&amp;#39; ] [ID] [ArrayDecl]* In contrast to global and local declarations, the parameter list should not be terminated by a semicolon.
Call by Reference and Call by Value Parameters can be declared to have either call-by-value or call-by-reference semantics. The syntax is taken from C++, where the identifier of a call-by-reference parameter is prefixed with an ampersand in the parameter declaration.</description></item><item><title>Priorities</title><link>/language-reference/system-description/priorities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/priorities/</guid><description>Given some priority order on the transitions, the intuition is that, at a given time-point, a transition is enabled only if no higher priority transition is enabled (see also Semantics.) We say that the higher priority transition blocks the lower priority transition.
Priorities can be assigned to the channels and processes of a system. The priority orders defined in the system are translated into a priority order on tau-transitions and synchronizing transitions.</description></item><item><title>Scope Rules</title><link>/language-reference/system-description/scope-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/scope-rules/</guid><description>The scope rules determine which element a name refers to in a given context. The context is either local (to a process template), or global (in a system description).
In a local context, the names are always referring to local declarations or formal parameters (if the name is locally defined), otherwise to a globally declared name.
In the global context, a name is always referring to a global declaration.
Note: There is only one name space in each context.</description></item><item><title>Semantics</title><link>/language-reference/system-description/semantics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/semantics/</guid><description>In the following we give a pseudo-formal semantics for UPPAAL. The semantics defines a timed transition system (S, s0, →) describing the behaviour of a network of extended timed automata. The set of states S is defined as {(L, v) | v ⊨ Inv(L)}, where L is a location vector, v is a function (called a valuation) mapping integer variables and clocks to their values, and Inv is a function mapping locations and location vectors to invariants.</description></item></channel></rss>