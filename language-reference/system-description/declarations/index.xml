<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Declarations on UPPAAL Documentation</title><link>/language-reference/system-description/declarations/</link><description>Recent content in Declarations on UPPAAL Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/language-reference/system-description/declarations/index.xml" rel="self" type="application/rss+xml"/><item><title>Types</title><link>/language-reference/system-description/declarations/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/declarations/types/</guid><description>There are 6 predefined types: int, bool, clock, chan, double and string. Array and record types can be defined over all types except string.
Type ::= Prefix TypeId Prefix ::= &amp;#39;urgent&amp;#39; | &amp;#39;broadcast&amp;#39; | &amp;#39;meta&amp;#39; | &amp;#39;const&amp;#39; TypeId ::= ID | &amp;#39;int&amp;#39; | &amp;#39;clock&amp;#39; | &amp;#39;chan&amp;#39; | &amp;#39;bool&amp;#39; | &amp;#39;double&amp;#39; | &amp;#39;string&amp;#39; | &amp;#39;int&amp;#39; &amp;#39;[&amp;#39; [Expression] &amp;#39;,&amp;#39; [Expression] &amp;#39;]&amp;#39; | &amp;#39;scalar&amp;#39; &amp;#39;[&amp;#39; Expression &amp;#39;]&amp;#39; | &amp;#39;struct&amp;#39; &amp;#39;{&amp;#39; FieldDecl (FieldDecl)* &amp;#39;}&amp;#39; FieldDecl ::= Type ID ArrayDecl* (&amp;#39;,&amp;#39; ID ArrayDecl*)* &amp;#39;;&amp;#39; ArrayDecl ::= &amp;#39;[&amp;#39; [Expression] &amp;#39;]&amp;#39; | &amp;#39;[&amp;#39; Type &amp;#39;]&amp;#39; The default range of an integer is [-32768, 32767].</description></item><item><title>Functions</title><link>/language-reference/system-description/declarations/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/declarations/functions/</guid><description>Functions can be declared alongside other declarations. The syntax for functions is defined by the grammar for Function:
Function ::= [Type] [ID] &amp;#39;(&amp;#39; [Parameters] &amp;#39;)&amp;#39; Block Block ::= &amp;#39;{&amp;#39; LocalDeclaration* Statement* &amp;#39;}&amp;#39; LocalDeclation ::= TypeDeclaration | VariableDeclaration Statement ::= Block | &amp;#39;;&amp;#39; | [Expression] &amp;#39;;&amp;#39; | ForLoop | Iteration | WhileLoop | DoWhileLoop | IfStatement | ReturnStatement ForLoop ::= &amp;#39;for&amp;#39; &amp;#39;(&amp;#39; [Expression] &amp;#39;;&amp;#39; [Expression] &amp;#39;;&amp;#39; [Expression] &amp;#39;)&amp;#39; Statement Iteration ::= &amp;#39;for&amp;#39; &amp;#39;(&amp;#39; [ID] &amp;#39;:&amp;#39; [Type] &amp;#39;)&amp;#39; Statement WhileLoop ::= &amp;#39;while&amp;#39; &amp;#39;(&amp;#39; [Expression] &amp;#39;)&amp;#39; Statement DoWhile ::= &amp;#39;do&amp;#39; Statement &amp;#39;while&amp;#39; &amp;#39;(&amp;#39; [Expression] &amp;#39;)&amp;#39; &amp;#39;;&amp;#39; IfStatment ::= &amp;#39;if&amp;#39; &amp;#39;(&amp;#39; [Expression] &amp;#39;)&amp;#39; Statement [ &amp;#39;else&amp;#39; Statement ] ReturnStatement ::= &amp;#39;return&amp;#39; [ [Expression] ] &amp;#39;;&amp;#39; Functions The declarations inside functions include only variable and type declarations.</description></item><item><title>External Functions</title><link>/language-reference/system-description/declarations/external-functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/declarations/external-functions/</guid><description>External Functions is an expert user feature and requires a high-level understanding of dynamic library loading and linking. The feature is only officially supported on Linux.
This feature is supported since Uppaal Stratego version 4.1.20-7, or Uppaal version 5.0 or later.
External Functions can be decreated alongside other declaratios. External functions are local to the current scope, defined by the grammar:
ExternDecl = &amp;#39;import&amp;#39; String &amp;#39;{&amp;#39; [FwdDeclList] &amp;#39;}&amp;#39; FwdDeclList = FwdDecl &amp;#39;;&amp;#39; | FwdDeclList FwdDecl &amp;#39;;&amp;#39; FwdDecl = [ID &amp;#39;=&amp;#39;] Type ID &amp;#39;(&amp;#39; [Parameters] &amp;#39;)&amp;#39; The following code will load the external libary libexternal.</description></item></channel></rss>