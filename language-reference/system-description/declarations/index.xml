<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Declarations on UPPAAL Documentation</title><link>/language-reference/system-description/declarations/</link><description>Recent content in Declarations on UPPAAL Documentation</description><generator>Hugo</generator><language>en-us</language><atom:link href="/language-reference/system-description/declarations/index.xml" rel="self" type="application/rss+xml"/><item><title>Types</title><link>/language-reference/system-description/declarations/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/declarations/types/</guid><description>&lt;p>There are 6 predefined types: &lt;code>int&lt;/code>, &lt;code>bool&lt;/code>, &lt;code>clock&lt;/code>, &lt;code>chan&lt;/code>, &lt;code>double&lt;/code> and &lt;code>string&lt;/code>. Array and record types can be defined over all types except &lt;code>string&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-EBNF" data-lang="EBNF">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Type &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::&lt;/span>&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">Prefix TypeId&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Prefix &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;urgent&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;broadcast&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;meta&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;const&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">TypeId &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#66d9ef">ID &lt;/span>| &lt;span style="color:#e6db74">&amp;#39;int&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;clock&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;chan&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;bool&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;double&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;string&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;int&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;scalar&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Expression &lt;/span>&lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;struct&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">FieldDecl &lt;/span>(&lt;span style="color:#66d9ef">FieldDecl&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">*&lt;/span> &lt;span style="color:#e6db74">&amp;#39;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FieldDecl &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#66d9ef">Type ID ArrayDecl&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">*&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">ID ArrayDecl&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">*&lt;/span> &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ArrayDecl &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;[&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Type &lt;/span>&lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The default range of an integer is &lt;code>[-32768, 32767]&lt;/code>. Any assignment out of range will cause the verification to abort.&lt;/p></description></item><item><title>Functions</title><link>/language-reference/system-description/declarations/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/declarations/functions/</guid><description>&lt;p>Functions can be declared alongside other declarations. The syntax for functions is defined by the grammar for &lt;code>Function&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-EBNF" data-lang="EBNF">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Function &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::&lt;/span>&lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#66d9ef">Type&lt;/span>] [&lt;span style="color:#66d9ef">ID&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Parameters&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Block&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Block &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">LocalDeclaration&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">*&lt;/span> &lt;span style="color:#66d9ef">Statement&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">*&lt;/span> &lt;span style="color:#e6db74">&amp;#39;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">LocalDeclation &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#66d9ef">TypeDeclaration &lt;/span>| &lt;span style="color:#66d9ef">VariableDeclaration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Statement &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#66d9ef">Block&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">ForLoop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">Iteration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">WhileLoop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">DoWhileLoop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">IfStatement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">ReturnStatement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ForLoop&lt;/span>	 &lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;for&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Statement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Iteration &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;for&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">ID&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Type&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Statement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">WhileLoop &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;while&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Statement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">DoWhile &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;do&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Statement &lt;/span>&lt;span style="color:#e6db74">&amp;#39;while&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">IfStatment &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;if&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Statement &lt;/span>[ &lt;span style="color:#e6db74">&amp;#39;else&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Statement &lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ReturnStatement &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;return&amp;#39;&lt;/span> [ [&lt;span style="color:#66d9ef">Expression&lt;/span>] ] &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>See &lt;a href="/grammar/#FunctionDecl">rail road diagram for the entire Function declaration&lt;/a>.&lt;/p></description></item><item><title>External Functions</title><link>/language-reference/system-description/declarations/external-functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/declarations/external-functions/</guid><description>&lt;div class="notices info" >&lt;p>The external functions are supported since Uppaal Stratego version 4.1.20-7, or Uppaal version 5.0 or later.&lt;/p>
&lt;/div>


&lt;div class="notices info" >&lt;p>External Functions is an expert user feature and requires a high-level understanding of dynamic library loading and linking.&lt;br>
The feature is supported on Linux and experimental on Windows and macOS.&lt;/p>
&lt;/div>

&lt;p>External Functions can be declared alongside other declarations. External functions are local to the current scope, defined by the grammar:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-EBNF" data-lang="EBNF">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ExternDecl &lt;/span>&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;import&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Path &lt;/span>&lt;span style="color:#e6db74">&amp;#39;{&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">FwdDeclList&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FwdDeclList &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">=&lt;/span> &lt;span style="color:#66d9ef">FwdDecl &lt;/span>&lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">FwdDeclList FwdDecl &lt;/span>&lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FwdDecl &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">=&lt;/span> [&lt;span style="color:#66d9ef">ID &lt;/span>&lt;span style="color:#e6db74">&amp;#39;=&amp;#39;&lt;/span>] &lt;span style="color:#66d9ef">Type ID &lt;/span>&lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Parameters&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;dl>
&lt;dt>&lt;tt>Path&lt;/tt>&lt;/dt>
&lt;dd>is a double-quoted (using &lt;code>&amp;quot;&lt;/code>) character sequence (string) denoting a file path to the library placed on the same computer as the used engine (&lt;code>server&lt;/code> or &lt;code>verifyta&lt;/code>).&lt;br>
Note that the backslash (&lt;code>\&lt;/code>) character in (Windows) paths needs to be either escaped with another backslash or replaced with the forwardslash (&lt;code>/&lt;/code>), i.e. &lt;code>\&lt;/code> should be replaced with either &lt;code>\\&lt;/code> or &lt;code>/&lt;/code>. For example, &lt;code>&amp;quot;C:\libexternal.dll&amp;quot;&lt;/code> should be written as &lt;code>&amp;quot;C:\\libexternal.dll&amp;quot;&lt;/code> or &lt;code>&amp;quot;C:/libexternal.dll&amp;quot;&lt;/code>.&lt;/dd>
&lt;/dl>
&lt;p>The following code will load the external libary &lt;code>libexternal.so&lt;/code> from the path &lt;code>/home/user/lib&lt;/code> and import the functions &lt;code>get_sqrt&lt;/code>, &lt;code>get_prime&lt;/code>, &lt;code>fibonacci&lt;/code>, &lt;code>is_the_world_safe&lt;/code> and &lt;code>set_temperature&lt;/code>.
The function &lt;code>is_the_world_safe&lt;/code> will be accessible using the name &lt;code>is_safe&lt;/code>.&lt;/p></description></item></channel></rss>