<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Query Syntax on UPPAAL Documentation</title><link>/language-reference/query-syntax/</link><description>Recent content in Query Syntax on UPPAAL Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/language-reference/query-syntax/index.xml" rel="self" type="application/rss+xml"/><item><title>Syntax of Symbolic Queries</title><link>/language-reference/query-syntax/symbolic_queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/query-syntax/symbolic_queries/</guid><description>Symbolic Queries Symbolic queries are performed using symbolic operations based on symbolic semantics of timed automata and correspond to a mathematically rigorous proof.
SymbolicQuery ::= &amp;#39;A[]&amp;#39; Expression Subjection | &amp;#39;E&amp;lt;&amp;gt;&amp;#39; Expression Subjection | &amp;#39;E[]&amp;#39; Expression Subjection | &amp;#39;A&amp;lt;&amp;gt;&amp;#39; Expression Subjection | Expression --&amp;gt; Expression Subjection | &amp;#39;sup&amp;#39; &amp;#39;:&amp;#39; List Subjection | &amp;#39;sup&amp;#39; &amp;#39;{&amp;#39; Expression &amp;#39;}&amp;#39; &amp;#39;:&amp;#39; List Subjection | &amp;#39;inf&amp;#39; &amp;#39;:&amp;#39; List Subjection | &amp;#39;inf&amp;#39; &amp;#39;{&amp;#39; Expression &amp;#39;}&amp;#39; &amp;#39;:&amp;#39; List Subjection List ::= Expression | Expression &amp;#39;,&amp;#39; List Subjection ::= // empty for no subjection | under StrategyName Subjection indicates whether the query should be subjected to a strategy.</description></item><item><title>Syntax of Controller Synthesis</title><link>/language-reference/query-syntax/controller_synthesis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/query-syntax/controller_synthesis/</guid><description>Controller Synthesis Queries Controller synthesis queries are decided using symbolic techniques over Timed Game (TIGA) automata, where the discrete actions are either controllable (controller&amp;rsquo;s actions, solid edges) or uncontrollable (environment actions, dashed edges). The result is either a strategy solving the game objective or that the strategy does not exist.
ControlQuery ::= ControlSpecifier Goal Subjection | CollaborativeControlSpecifier Goal Subjection | PartialControlSpecifier Goal Subjection | TimeEfficientGameSpecifier Goal ControlSpecifier ::= &amp;#39;control:&amp;#39; CollaborativeControlSpecifier ::= &amp;#39;E&amp;lt;&amp;gt;&amp;#39; &amp;#39;control:&amp;#39; PartialControlSpecifier ::= &amp;#39;{&amp;#39; List &amp;#39;}&amp;#39; &amp;#39;control:&amp;#39; TimeEfficientGameQuery ::= &amp;#39;control_t*&amp;#39; &amp;#39;(&amp;#39; GameTimeLimitExpression &amp;#39;,&amp;#39; LocalGameTimeLimitExpression &amp;#39;):&amp;#39; | &amp;#39;control_t*&amp;#39; &amp;#39;(&amp;#39; u &amp;#39;):&amp;#39; | &amp;#39;control_t*:&amp;#39; Goal ::= &amp;#39;A&amp;lt;&amp;gt;&amp;#39; WinExpression | &amp;#39;A[&amp;#39; NotLoseExpression &amp;#39;U&amp;#39; WinExpression &amp;#39;]&amp;#39; | &amp;#39;A[&amp;#39; NotLoseExpression &amp;#39;W&amp;#39; WinExpression &amp;#39;]&amp;#39; | &amp;#39;A[]&amp;#39; NotLoseExpression WinExpression ::= Expression NotLoseExpression ::= Expression GameTimeLimitExpression ::= Expression LocalGameTimeLimitExpression ::= Expression Subjection ::= // empty for no subjection | under StrategyName GameTimeLimitExpression describes a time limit within the game must be won.</description></item><item><title>Syntax of Statistical Queries</title><link>/language-reference/query-syntax/statistical_queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/query-syntax/statistical_queries/</guid><description>Statistical Queries Statistical queries are decided using concrete semantics of stochastic hybrid automata over a number of bounded concrete simulation runs and correspond to empirical measurements of the system performance. The results are of statistical estimate nature and may vary across different executions based on uncertainties specified in Statistical parameters.
SMCQuery ::= Simulate Subjection | Probability Subjection | ProbUntil Subjection | Probability ( &amp;#39;&amp;lt;=&amp;#39; | &amp;#39;&amp;gt;=&amp;#39; ) PROB Subjection | Probability Subjection &amp;#39;&amp;gt;=&amp;#39; Probability Subjection | Estimate Subjection Simulate ::= &amp;#39;simulate&amp;#39; &amp;#39;[&amp;#39; SMCBounds &amp;#39;]&amp;#39; &amp;#39;{&amp;#39; List &amp;#39;}&amp;#39; [ &amp;#39;:&amp;#39; [ SATRUNS &amp;#39;:&amp;#39; ] Expression ] Probability ::= &amp;#39;Pr&amp;#39; MITLExpression | &amp;#39;Pr[&amp;#39; SMCBounds &amp;#39;]&amp;#39; &amp;#39;(&amp;#39; PathType Expression &amp;#39;)&amp;#39; ProbUntil ::= &amp;#39;Pr[&amp;#39; SMCBounds &amp;#39;]&amp;#39; &amp;#39;(&amp;#39; Expression &amp;#39;U&amp;#39; Expression &amp;#39;)&amp;#39; Estimate ::= &amp;#39;E[&amp;#39; SMCBounds &amp;#39;]&amp;#39; &amp;#39;(&amp;#39; (&amp;#39;min:&amp;#39; | &amp;#39;max:&amp;#39;) Expression &amp;#39;)&amp;#39; SMCBounds ::= BoundType [ ; RUNS ] BoundType ::= ( | Clock | &amp;#39;#&amp;#39; ) &amp;#39;&amp;lt;=&amp;#39; BOUND PathType ::= ( &amp;#39;&amp;lt;&amp;gt;&amp;#39; | &amp;#39;[]&amp;#39; ) Subjection ::= // empty for no subjection | under StrategyName BOUND is a non-negative integer constant denoting an upper bound over the absolute global time (when a variable is not specified), specific Clock (cost) variable or a number of action-transitions (#).</description></item><item><title>Syntax of Learning Queries</title><link>/language-reference/query-syntax/learning_queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/query-syntax/learning_queries/</guid><description>Learning Queries LearningQuery ::= ExpQuantifier &amp;#39;(&amp;#39; Expression &amp;#39;)&amp;#39; &amp;#39;[&amp;#39; BoundType &amp;#39;]&amp;#39; Features? &amp;#39;:&amp;#39; PathType Expression Subjection | ExpQuantifier &amp;#39;[&amp;#39; BoundType &amp;#39;]&amp;#39; Features? &amp;#39;:&amp;#39; PathType Expression Subjection | ExpPrQuantifier &amp;#39;[&amp;#39; BoundType &amp;#39;]&amp;#39; Features? &amp;#39;:&amp;#39; PathType Expression Subjection ExpQuantifier ::= ( minE | maxE ) ExpPrQuantifier ::= ( minPr | maxPr ) Features ::= &amp;#39;{&amp;#39; List &amp;#39;}&amp;#39; &amp;#39;-&amp;gt;&amp;#39; &amp;#39;{&amp;#39; List &amp;#39;}&amp;#39; Subjection ::= // empty for no subjection | under StrategyName Features describes a mapping (state space partition) from a partial state to a player action.</description></item><item><title>Syntax of Strategy Queries</title><link>/language-reference/query-syntax/strategy_queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/query-syntax/strategy_queries/</guid><description>Strategy Queries Strategy queries allow store, load, reuse and refine the strategies by assigning names to them.
AssignQuery ::= &amp;#39;strategy&amp;#39; StrategyName &amp;#39;=&amp;#39; AssignableQuery AssignableQuery ::= ControlQuery | LearningQuery | &amp;#39;loadStrategy&amp;#39; Features &amp;#39;(&amp;#39; Path &amp;#39;)&amp;#39; NonAssignableQuery ::= SymbolicQuery | SMCQuery | &amp;#39;saveStrategy&amp;#39; &amp;#39;(&amp;#39; Path &amp;#39;,&amp;#39; StrategyName &amp;#39;)&amp;#39; StrategyName indicates the name of a strategy. Path is a double-quoted (using &amp;quot;) character sequence (string) denoting a file path on the same computer as the used engine (server or verifyta).</description></item></channel></rss>