<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>UPPAAL Documentation</title><link>/</link><description>Recent content on UPPAAL Documentation</description><generator>Hugo</generator><language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Basic Test Generation</title><link>/gui-reference/yggdrasil/tutorial/basic-test-generation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/yggdrasil/tutorial/basic-test-generation/</guid><description>&lt;!--
_Locations/channels_
_*TOOL MENU*_
&lt;tt> code
 -->
&lt;!-- Open the &lt;a href="../onoff/onoff.xml">onoff.xml&lt;/a> file in Uppaal. -->
&lt;h3 id="create-the-models">Create the models&lt;/h3>
&lt;p>Open the On/Off System model &lt;tt> &amp;ldquo;onoff/onoff.xml&amp;rdquo; &lt;/tt> file in Uppaal. The system contains two templates entitled &lt;em>System&lt;/em> and &lt;em>User&lt;/em>. The &lt;em>System&lt;/em> represents the system or device (e.g. lamp) under test. The &lt;em>User&lt;/em> models the possible user interactions with the system.&lt;/p>
&lt;p>The system can be either &lt;em>On&lt;/em> or &lt;em>Off&lt;/em>, with channels &lt;em>on&lt;/em> and &lt;em>off&lt;/em> changing between them. The user can non-deterministically press &lt;em>on&lt;/em> or &lt;em>off&lt;/em>.&lt;/p></description></item><item><title>File Menu</title><link>/gui-reference/menu-bar/file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/menu-bar/file/</guid><description>&lt;p>The leftmost menu of the menu bar is the file menu. It is mainly used to open and save (part of) system descriptions or requirement specifications created in UPPAAL. The available items are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>New System:&lt;/strong> re-initiates the editor with an empty system.&lt;/li>
&lt;li>&lt;strong>Open System:&lt;/strong> loads an existing system from file. The corresponding requirement specification (i.e. same file name but with the suffix .q) is loaded into the verifier, if it exists.&lt;/li>
&lt;li>&lt;strong>Save System:&lt;/strong> saves the system in the editor to file.&lt;/li>
&lt;li>&lt;strong>Save System As:&lt;/strong> saves the system in the editor to a specified file.&lt;/li>
&lt;li>&lt;strong>Import Template:&lt;/strong> imports template(s) from an existing system description. A dialog window is shown which allows a subset of the available templates to be imported.&lt;/li>
&lt;li>&lt;strong>Export Template:&lt;/strong> exports the currently edited template in Encapsulated Postscript format to file.&lt;/li>
&lt;li>&lt;strong>New Queries:&lt;/strong> re-initiates the requirement specification editor with an empty file.&lt;/li>
&lt;li>&lt;strong>Open Queries:&lt;/strong> loads an existing set of requirement specifications from file.&lt;/li>
&lt;li>&lt;strong>Save Queries:&lt;/strong> saves the requirement specifications in the editor to file.&lt;/li>
&lt;li>&lt;strong>Save Queries As:&lt;/strong> saves the requirement specifications in the editor to a specified file name.&lt;/li>
&lt;li>&lt;strong>Exit:&lt;/strong> exits UPPAAL.&lt;/li>
&lt;/ul></description></item><item><title>Generating Traces</title><link>/gui-reference/yggdrasil/traces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/yggdrasil/traces/</guid><description>&lt;p>Traces are generated using three purposes: queries, depth search, and individual edges.&lt;/p>
&lt;p>In the &lt;a href="/gui-reference/verifier/">Verifier&lt;/a> tab the &lt;a href="/language-reference/requirements-specification/">existential queries (&lt;tt>E&amp;lt;&amp;gt;&lt;/tt>)&lt;/a> can be used to specify a desired functionality to be tested and hence can be selected as a test purpose for test case generation. All or specific queries can be selected and the resulting trace is added to be used as a test case.&lt;/p>
&lt;p>The second option uses heuristics of random depth first search of the specified number of steps with a hope of increasing the coverage. The resulting trace is used as a test case. The search process is repeated until the newly generated trace does not contribute new coverage over the previous traces. In order to use this method a global integer variable named &lt;tt>__reach__&lt;/tt> must be declared, initialized to zero and should not be used anywhere in the model. The number of steps depends on the model (size and depth of the model) and application domain (how long test cases are acceptable). If depth is configured too small there is a risk that many edges wil not be covered. If depth is configured very high, needlessly long test cases will be generated.&lt;/p></description></item><item><title>Identifiers</title><link>/language-reference/expressions/identifiers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/expressions/identifiers/</guid><description>&lt;p>The valid identifier names are described by the following regular expression: &lt;code>[a-zA-Z_]([a-zA-Z0-9_])*&lt;/code>&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;ul>
&lt;li>&lt;code>a, B, c2, d2&lt;/code>
valid identifier names.&lt;/li>
&lt;li>&lt;code>1, 2a, 3B, 4c5&lt;/code>
&lt;strong>invalid&lt;/strong> identifier names.&lt;/li>
&lt;/ul></description></item><item><title>Locations</title><link>/language-reference/system-description/templates/locations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/templates/locations/</guid><description>&lt;p>Locations of a timed automaton are graphically represented as circles. If a timed automaton is considered as a directed graph, then locations represent the vertices of this graph. Locations are connected by &lt;a href="/language-reference/system-description/templates/edges/">edges&lt;/a>.&lt;/p>
&lt;h2 id="names">Names&lt;/h2>
&lt;p>Locations can have an optional name. Besides serving as an identifier allowing you to refer to the location from the &lt;a href="/language-reference/requirements-specification/">requirement specification language&lt;/a>, named locations are useful when documenting the model. The name must be a valid &lt;a href="/language-reference/expressions/identifiers/">identifier&lt;/a> and location names share the name space with variables, types, templates, etc.&lt;/p></description></item><item><title>Navigation Tree</title><link>/gui-reference/system-editor/navigation-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/system-editor/navigation-tree/</guid><description>&lt;p>The navigation tree is shown in the left panel of the system editor. It is used for accessing the various components of a system description. A node in the tree can be double clicked to view (or hide) the sub tree of the node. The root of the navigation tree is named &lt;em>Project&lt;/em>.&lt;/p>
&lt;p>The sub node &lt;em>Declarations&lt;/em> is used for &lt;a href="/language-reference/system-description/declarations/">declarations&lt;/a> of global scope. They can be referred to directly in template declarations.&lt;/p></description></item><item><title>Semantics of the Symbolic Queries</title><link>/language-reference/query-semantics/symb_queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/query-semantics/symb_queries/</guid><description>&lt;p>In the following we give a pseudo-formal semantics for the requirement specification language of UPPAAL. We assume the existence of a timed transition system (&lt;em>S, s&lt;sub>0&lt;/sub>,&lt;/em> →) as defined in the &lt;a href="/language-reference/system-description/semantics/">semantics of UPPAAL timed automata&lt;/a>. In the following, &lt;code>p&lt;/code> and &lt;code>q&lt;/code> are &lt;a href="#state-properties">state properties&lt;/a> for which we define the following temporal properties:&lt;/p>
&lt;p>&lt;strong>See also&lt;/strong> &lt;a href="/language-reference/query-syntax/symbolic_queries/">Syntax of Symbolic Queries&lt;/a>.&lt;/p>
&lt;h3 id="possibly">Possibly&lt;/h3>
&lt;p>The property &lt;code>E&amp;lt;&amp;gt; p&lt;/code> evaluates to true for a timed transition system if and only if there is a sequence of delay and action transitions &lt;em>s&lt;/em>&lt;sub>&lt;em>0&lt;/em>&lt;/sub> → &lt;em>s&lt;/em>&lt;sub>&lt;em>1&lt;/em>&lt;/sub> → &amp;hellip; → &lt;em>s&lt;/em>&lt;sub>&lt;em>n&lt;/em>&lt;/sub>, where &lt;em>s&lt;/em>&lt;sub>&lt;em>0&lt;/em>&lt;/sub> is the initial state and &lt;em>s&lt;/em>&lt;sub>&lt;em>n&lt;/em>&lt;/sub> satisfies &lt;em>p&lt;/em>.&lt;/p></description></item><item><title>Simulation Control</title><link>/gui-reference/concrete-simulator/simulation-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/concrete-simulator/simulation-control/</guid><description>&lt;p>The simulation control is the left panel of the simulator. It is used to control the simulation and to select the state or transition to be visualized in the others panels of the simulator. The control panel is divided in two parts:&lt;/p>
&lt;p>The upper part is used for performing step-by-step simulation. The &lt;em>Transition chooser&lt;/em> area is a clickable area where vertical axis displays the active transitions at this location and horizontal axis displays the time at which the transition will be ﬁred. The time interval where a transition is enabled and the time interval where a transition is selectable are colored in different way. The time interval in which a transition can be fired (where the transition is selectable) is delimited by markers: one small circle at the beginning and one at the end of the interval (full if it is close, empty if it is open). When the mouse move to a selectable area, the color of the interval become brighter. By clicking one can select a specific transition and a specific time for firing the transition. The selected transition will be highlighted. The time selected is displayed in the &lt;em>Delay&lt;/em>-combo box. One can also specified directly the time in the &lt;em>Delay&lt;/em>-combo, once the transition has been selected. If one click in a non-selectable zone of a transition, the tool chooses the closest valid time. The &lt;em>Reset Delay&lt;/em>-button is used to reset the delay to zero. Pressing the &lt;em>Take transition&lt;/em>-button causes the simulated system to fire the selected transition at the specified time. The &lt;em>Reset&lt;/em>-button is used to reset the simulated system to its initial state.&lt;/p></description></item><item><title>Specifying Requirements</title><link>/gui-reference/verifier/specifying/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/verifier/specifying/</guid><description>&lt;p>An overview of the system requirements (called queries below and in the GUI) is shown in the panel named &lt;em>Overview&lt;/em> of the verifier. The toggle button &lt;em>Comments/Queries&lt;/em> is used to control if the queries or the comments are to be shown in the overview.&lt;/p>
&lt;p>Queries are selected and de-selected using the mouse alone, or in combination with the Shift or the Control key of the keyboard (use the Shift key to (de-)select a range of entries and the Control key to (de-)select single entries). The first selected requirement and its comment is always shown in the two editor fields named &lt;em>Query&lt;/em> and &lt;em>Comment&lt;/em>, where they may be edited.&lt;/p></description></item><item><title>Syntax of Symbolic Queries</title><link>/language-reference/query-syntax/symbolic_queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/query-syntax/symbolic_queries/</guid><description>&lt;h2 id="symbolic-queries">Symbolic Queries&lt;/h2>
&lt;p>Symbolic queries are performed using symbolic operations based on symbolic semantics of timed automata and correspond to a mathematically rigorous proof.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-EBNF" data-lang="EBNF">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SymbolicQuery &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::&lt;/span>&lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;A[]&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Expression Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;E&amp;lt;&amp;gt;&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Expression Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;E[]&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Expression Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;A&amp;lt;&amp;gt;&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Expression Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">Expression --&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">Expression Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;sup&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">List Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;sup&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Predicate &lt;/span>&lt;span style="color:#e6db74">&amp;#39;}&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">List Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;inf&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">List Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;inf&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Predicate &lt;/span>&lt;span style="color:#e6db74">&amp;#39;}&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">List Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;bounds&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">List Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;bounds&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Predicate &lt;/span>&lt;span style="color:#e6db74">&amp;#39;}&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">List Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">List &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#66d9ef">Expression &lt;/span>| &lt;span style="color:#66d9ef">Expression &lt;/span>&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">List&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Predicate &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#66d9ef">Expression&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Subjection &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#960050;background-color:#1e0010">//&lt;/span> &lt;span style="color:#66d9ef">empty for no subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 | &lt;span style="color:#66d9ef">under StrategyName&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;dl>
&lt;dt>&lt;tt>Predicate&lt;/tt>&lt;/dt>
&lt;dd>an expression over a system state evaluating to either &lt;code>true&lt;/code> or &lt;code>false&lt;/code>. The predicate typically refers to a process location, but it can also use integers, logical operations and clock constraints.&lt;/dd>
&lt;dt>&lt;tt>Subjection&lt;/tt>&lt;/dt>
&lt;dd>indicates whether the query should be subjected to a strategy.&lt;/dd>
&lt;/dl>
&lt;p>For &lt;code>sup&lt;/code> and &lt;code>bounds&lt;/code> queries, the list of expressions may not contain clock constraints and must evaluate to either an integer or a clock.&lt;/p></description></item><item><title>Template Instantiation</title><link>/language-reference/system-description/system-definition/template-instantiation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/system-definition/template-instantiation/</guid><description>&lt;p>New templates can be defined from existing templates using the grammar for &lt;code>Instantiation&lt;/code>. The new template has the same automaton structure and the same local variables as the template it is defined from. However, arguments are provided for any formal parameters of the template, thus changing the interface of the template.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-EBNF" data-lang="EBNF">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Instantiation &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::&lt;/span>&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">ID &lt;/span>[ &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Parameters&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> ] &lt;span style="color:#e6db74">&amp;#39;=&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">ID &lt;/span>&lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Arguments&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Template instantiation is most often used to bind formal parameters to actual arguments. The resulting template is later instantiated into a process by listing it in the &lt;a href="../">system line&lt;/a>.&lt;/p></description></item><item><title>Types</title><link>/language-reference/system-description/declarations/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/declarations/types/</guid><description>&lt;p>There are 6 predefined types: &lt;code>int&lt;/code>, &lt;code>bool&lt;/code>, &lt;code>clock&lt;/code>, &lt;code>chan&lt;/code>, &lt;code>double&lt;/code> and &lt;code>string&lt;/code>. Array and record types can be defined over all types except &lt;code>string&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-EBNF" data-lang="EBNF">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Type &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::&lt;/span>&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">Prefix TypeId&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Prefix &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;urgent&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;broadcast&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;meta&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;const&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">TypeId &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#66d9ef">ID &lt;/span>| &lt;span style="color:#e6db74">&amp;#39;int&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;clock&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;chan&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;bool&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;double&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;string&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;int&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;scalar&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Expression &lt;/span>&lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;struct&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">FieldDecl &lt;/span>(&lt;span style="color:#66d9ef">FieldDecl&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">*&lt;/span> &lt;span style="color:#e6db74">&amp;#39;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FieldDecl &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#66d9ef">Type ID ArrayDecl&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">*&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">ID ArrayDecl&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">*&lt;/span> &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ArrayDecl &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;[&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Type &lt;/span>&lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The default range of an integer is &lt;code>[-32768, 32767]&lt;/code>. Any assignment out of range will cause the verification to abort.&lt;/p></description></item><item><title>UPPAAL</title><link>/toolsandapi/uppaal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/toolsandapi/uppaal/</guid><description>&lt;p>UPPAAL can be executed from the command line using the following command on unix:&lt;/p>
&lt;blockquote>
&lt;p>&lt;tt>uppaal [OPTION] &amp;hellip; [FILENAME]&lt;/tt>&lt;/p>
&lt;/blockquote>
&lt;p>On windows, the following command can be used (for instance, using &amp;ldquo;Run&amp;rdquo; from the Start Menu):&lt;/p>
&lt;blockquote>
&lt;p>&lt;tt>java -jar \path\uppaal.jar [OPTION] &amp;hellip; [FILENAME]&lt;/tt>&lt;/p>
&lt;/blockquote>
&lt;p>where &lt;tt>path&lt;/tt> is the complete path to the &lt;tt>uppaal.jar&lt;/tt> file (it might also be necessary to specify the complete path to the &lt;tt>java&lt;/tt> executable).&lt;/p>
&lt;p>The optional filename refers to a model to be loaded at startup.&lt;/p></description></item><item><title>Using Model Variables</title><link>/gui-reference/yggdrasil/tutorial/using-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/yggdrasil/tutorial/using-variables/</guid><description>&lt;p>This tutorial assumes you have understood &lt;a href="../basic-test-generation">basic test case generation&lt;/a>.&lt;/p>
&lt;h2 id="the-model-updown-system">The model: Up/Down system&lt;/h2>
&lt;p>Open the &lt;tt> updown/updown.xml&lt;/tt> file in Uppaal.&lt;/p>
&lt;p>The system contains two templates: &lt;em>System&lt;/em> and &lt;em>User&lt;/em>.&lt;/p>
&lt;p>The system can be either &lt;em>On&lt;/em>, &lt;em>Max&lt;/em>, or &lt;em>Off&lt;/em>, with channels &lt;em>up&lt;/em> and &lt;em>down&lt;/em> changing between them. The user can non-deterministically press &lt;em>up&lt;/em> or &lt;em>down&lt;/em>.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">&lt;em>System&lt;/em> template&lt;/th>
 &lt;th style="text-align: center">&lt;em>User&lt;/em> template&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">&lt;img src="../img/System2.png" alt="System template">&lt;/td>
 &lt;td style="text-align: center">&lt;img src="../img/User2.png" alt="User template">&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="add-model-annotations-and-test-pre--and-post-fix-code">Add model annotations and test pre- and post-fix code&lt;/h2>
&lt;p>Global variable declarations and prefix/postfix code is &lt;a href="basic-test-generation#add-test-cases-specific-model-annotations">the same as for the on/off model&lt;/a>.&lt;/p></description></item><item><title>Using Queries</title><link>/gui-reference/yggdrasil/tutorial/using-queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/yggdrasil/tutorial/using-queries/</guid><description>&lt;p>This tutorial assumes you have understood &lt;a href="../using-variables">using variables&lt;/a>.&lt;/p>
&lt;h3 id="the-system-model">The system model&lt;/h3>
&lt;p>This tutorial uses the same Up/Down model as in the section &lt;a href="../using-variables/#the-model-updown-system">using variables&lt;/a>. Open the &lt;tt> updown/updown.xml&lt;/tt> file in Uppaal.&lt;/p>
&lt;h3 id="editing-the-queries">Editing the Queries&lt;/h3>
&lt;p>Sometimes it is desirable to generate test cases for specific purposes. This can be done by creating a verification query for the purpose, and use that to generate a test trace.&lt;/p>
&lt;p>In the &lt;em>&lt;em>Verifier&lt;/em>&lt;/em> tab you can enter queries.
The &lt;em>&lt;em>Test Cases&lt;/em>&lt;/em> generator is able to search for traces satisfying reachability queries (that is queries which start with &lt;code>E&amp;lt;&amp;gt;&lt;/code>. The query entered in this tutorial should be &lt;code>E&amp;lt;&amp;gt; System.Max&lt;/code>, which asks the verifier to find a trace where the &lt;em>System&lt;/em> process is in the location &lt;em>Max&lt;/em>.&lt;/p></description></item><item><title>Syntax of Controller Synthesis</title><link>/language-reference/query-syntax/controller_synthesis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/query-syntax/controller_synthesis/</guid><description>&lt;h2 id="controller-synthesis-queries">Controller Synthesis Queries&lt;/h2>
&lt;p>Controller synthesis queries are decided using symbolic techniques over Timed Game (TIGA) automata, where the discrete actions are either controllable (controller&amp;rsquo;s actions, solid edges) or uncontrollable (environment actions, dashed edges). The result is either a strategy solving the game objective or that the strategy does not exist.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-EBNF" data-lang="EBNF">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ControlQuery &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::&lt;/span>&lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">ControlSpecifier Goal Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">CollaborativeControlSpecifier Goal Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">PartialControlSpecifier Goal Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">TimeEfficientGameSpecifier Goal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ControlSpecifier &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;control:&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">CollaborativeControlSpecifier &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;E&amp;lt;&amp;gt;&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;control:&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">PartialControlSpecifier &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;{&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">List &lt;/span>&lt;span style="color:#e6db74">&amp;#39;}&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;control:&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">TimeEfficientGameQuery &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;control_t*&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">GameTimeLimitExpression &lt;/span>&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">LocalGameTimeLimitExpression &lt;/span>&lt;span style="color:#e6db74">&amp;#39;):&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;control_t*&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">u &lt;/span>&lt;span style="color:#e6db74">&amp;#39;):&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;control_t*:&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Goal &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;A&amp;lt;&amp;gt;&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">WinExpression&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;A[&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">NotLoseExpression &lt;/span>&lt;span style="color:#e6db74">&amp;#39;U&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">WinExpression &lt;/span>&lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;A[&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">NotLoseExpression &lt;/span>&lt;span style="color:#e6db74">&amp;#39;W&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">WinExpression &lt;/span>&lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;A[]&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">NotLoseExpression&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">WinExpression &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#66d9ef">Expression&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">NotLoseExpression &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#66d9ef">Expression&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">GameTimeLimitExpression &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#66d9ef">Expression&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">LocalGameTimeLimitExpression &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#66d9ef">Expression&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Subjection &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#960050;background-color:#1e0010">//&lt;/span> &lt;span style="color:#66d9ef">empty for no subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 | &lt;span style="color:#66d9ef">under StrategyName&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;dl>
&lt;dt>&lt;tt>GameTimeLimitExpression&lt;/tt>&lt;/dt>
&lt;dd>describes a time limit within the game must be won. This expression is only evaluated once at the beginning, thus should not depend on the current state.&lt;/dd>
&lt;dt>&lt;tt>LocalGameTimeLimitExpression&lt;/tt>&lt;/dt>
&lt;dd>describes an additional time limit such that the game can be won within &lt;tt>GameTimeLimitExpression - LocalGameTimeLimitExpression&lt;/tt> time units. This expression is evaluated in each state, and can therefore depend on state or clock constraints. Must be side-effect free.&lt;/dd>
&lt;/dl>
&lt;p>See &lt;a href="/grammar/#ControlQuery">rail road diagram for the entire ControlQuery syntax&lt;/a>.&lt;/p></description></item><item><title>Docker</title><link>/toolsandapi/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/toolsandapi/docker/</guid><description>&lt;h1 id="docker-containerization">Docker Containerization&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>Install Docker desktop from &lt;a href="//www.docker.com">docker.com&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Download and extract/install UPPAAL for Linux.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Inside UPPAAL installation create &lt;code>uppaal-X.Y.Z/res/Dockerfile&lt;/code> file with the following content:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-docker" data-lang="docker">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> ubuntu:latest&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> useradd -ms /bin/bash uppaal&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> apt-get -qq update &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> apt-get -qq upgrade&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">USER&lt;/span>&lt;span style="color:#e6db74"> uppaal&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ENV&lt;/span> USER&lt;span style="color:#f92672">=&lt;/span>uppaal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /home/uppaal&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ADD&lt;/span> . uppaal&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ENV&lt;/span> PATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/home/uppaal/uppaal/bin:&lt;/span>$PATH&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ARG&lt;/span> KEY&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ARG&lt;/span> LEASE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> verifyta.sh --key &lt;span style="color:#e6db74">${&lt;/span>KEY&lt;span style="color:#e6db74">}&lt;/span> --lease &lt;span style="color:#e6db74">${&lt;/span>LEASE&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> verifyta.sh --version&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">EXPOSE&lt;/span>&lt;span style="color:#e6db74"> 2350&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">CMD&lt;/span> /home/uppaal/uppaal/bin/socketserver.sh /home/uppaal/uppaal/bin/server.sh&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>On a terminal, change the directory to UPPAAL installation and create a docker image by running the following command:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>cd uppaal-X.Y.Z
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker image build --build-arg KEY&lt;span style="color:#f92672">=&lt;/span>$UPPAAL_LICENSE_KEY --tag uppaal-X.Y.Z -f res/Dockerfile .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>where &lt;code>$UPPAAL_LICENSE_KEY&lt;/code> is your UPPAAL license key from &lt;a href="https://uppaal.veriaal.dk">uppaal.veriaal.dk&lt;/a>.&lt;/p></description></item><item><title>Drawing</title><link>/gui-reference/system-editor/drawing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/system-editor/drawing/</guid><description>&lt;p>The rightmost panel of the system editor is used for drawing automata. There are currently four drawing tools named &lt;em>Select&lt;/em>, &lt;em>Location&lt;/em>, &lt;em>Edge&lt;/em>, and &lt;em>Nail&lt;/em> represented by the buttons in the tool bar.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Select tool:&lt;/strong> The select tool is used to select, move, modify and delete elements. Elements can be selected by clicking on them or by dragging a rubber band arround one or more elements. Elements can be added or removed from a selection by holding down the control key while clicking on the element. The current selection can be moved by dragging them with the mouse. Double clicking an element brings up the editor for that element. Right clicking an element brings up a pop-up menu from which properties of the element can be changed. It is possible to change the source and target of an edge by moving the mouse to the beginning or end of an edge until a small circle appears. Drag this circle to a new location in order to change the source or target of the edge.&lt;/li>
&lt;li>&lt;strong>Location tool:&lt;/strong> The location tool is used to add new locations. Simply click with the left mouse button in order to add a new location.&lt;/li>
&lt;li>&lt;strong>Branch tool:&lt;/strong> The branch tool is used to create probabilistic branches. Simply click with the left mouse button in order to add a new branch point, then choose edge tool to create connecting edges.&lt;/li>
&lt;li>&lt;strong>Edge tool:&lt;/strong> The edge tool is used to add new edges between locations. Start the edge by clicking on the source location, then click in order to place nails and finally click the target location. The operation can be cancelled by pressing the right mouse button.&lt;/li>
&lt;li>&lt;strong>Nail tool:&lt;/strong> The nail tool is used to add new nails to an edge. Simply click and drag anywhere on an edge to add and place a new nail.&lt;/li>
&lt;/ul>
&lt;p>For users with a three button mouse, the middle mouse button can be used to create new elements. The editor automatically chooses the correct tool: Clicking on an empty spot creates a new location, clicking on a location creates a new edge and clicking on an edge creates a new nail. With this feature it is possible to use the functionallity of all four tools without having to select the tools directly.&lt;/p></description></item><item><title>Edges</title><link>/language-reference/system-description/templates/edges/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/templates/edges/</guid><description>&lt;p>Locations are connected by &lt;em>edges&lt;/em>. Edges are annotated with &lt;em>selections&lt;/em>, &lt;em>guards&lt;/em>, &lt;em>synchronisations&lt;/em> and &lt;em>updates&lt;/em>. Edges may also have branches of possible destinations with their own updates and probabilistic &lt;em>weights&lt;/em>.&lt;/p>
&lt;dl>
&lt;dt>Selections&lt;/dt>
&lt;dd>Selections non-deterministically bind a given identifier to a value in a given range. The other three labels of an edge are within the scope of this binding.&lt;/dd>
&lt;dt>Guards&lt;/dt>
&lt;dd>An edge is enabled in a state if and only if the guard evaluates to true.&lt;/dd>
&lt;dt>Synchronisation&lt;/dt>
&lt;dd>Processes can synchronize over channels. Edges labelled with complementary actions over a common channel synchronise.&lt;/dd>
&lt;dt>Updates&lt;/dt>
&lt;dd>When an edge is traversed, the update expression of the edge is evaluated. The side effect of this expression changes the state of the system.&lt;/dd>
&lt;dt>Weights&lt;/dt>
&lt;dd>Edges emanating from a branchpoint can be assigned a probabilistic weight. The probability such edge-transition is proportional to the edge weight and inversely proportional to the sum of weights over all edges leaving that branchpoint.&lt;/dd>&lt;/dd>
&lt;/dl>
&lt;/dl>
&lt;h2 id="selections">Selections&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-EBNF" data-lang="EBNF">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SelectList &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::&lt;/span>&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">ID &lt;/span>&lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Type&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">SelectList &lt;/span>&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">ID &lt;/span>&lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Type&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For each &lt;code>ID&lt;/code> in &lt;code>SelectList&lt;/code>, bind &lt;code>ID&lt;/code> non-deterministically to a value of type &lt;code>Type&lt;/code> domain.
The identifiers are available as variables within the other labels of this edge (guard, synchronization, or update). The supported types are bounded integers and scalar sets.
&lt;strong>Note:&lt;/strong> The identifiers will shadow any variables with the same name.&lt;/p></description></item><item><title>Edit Menu</title><link>/gui-reference/menu-bar/edit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/menu-bar/edit/</guid><description>&lt;p>The Edit menu offers a set of commands supported in the system editor. The items are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Undo:&lt;/strong> reverses the most recent editing action. This function is only available in the editor.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Redo:&lt;/strong> re-applies the editing action that has most recently been reversed by the Undo action. This function is only available in the editor.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Cut:&lt;/strong> removes the selected text and places it in the clipboard. There must be an active text selection.&lt;/p></description></item><item><title>Functions</title><link>/language-reference/system-description/declarations/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/declarations/functions/</guid><description>&lt;p>Functions can be declared alongside other declarations. The syntax for functions is defined by the grammar for &lt;code>Function&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-EBNF" data-lang="EBNF">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Function &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::&lt;/span>&lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#66d9ef">Type&lt;/span>] [&lt;span style="color:#66d9ef">ID&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Parameters&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Block&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Block &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">LocalDeclaration&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">*&lt;/span> &lt;span style="color:#66d9ef">Statement&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">*&lt;/span> &lt;span style="color:#e6db74">&amp;#39;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">LocalDeclation &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#66d9ef">TypeDeclaration &lt;/span>| &lt;span style="color:#66d9ef">VariableDeclaration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Statement &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#66d9ef">Block&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">ForLoop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">Iteration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">WhileLoop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">DoWhileLoop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">IfStatement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">ReturnStatement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ForLoop&lt;/span>	 &lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;for&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Statement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Iteration &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;for&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">ID&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Type&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Statement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">WhileLoop &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;while&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Statement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">DoWhile &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;do&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Statement &lt;/span>&lt;span style="color:#e6db74">&amp;#39;while&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">IfStatment &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;if&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> [&lt;span style="color:#66d9ef">Expression&lt;/span>] &lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Statement &lt;/span>[ &lt;span style="color:#e6db74">&amp;#39;else&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Statement &lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ReturnStatement &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;return&amp;#39;&lt;/span> [ [&lt;span style="color:#66d9ef">Expression&lt;/span>] ] &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>See &lt;a href="/grammar/#FunctionDecl">rail road diagram for the entire Function declaration&lt;/a>.&lt;/p></description></item><item><title>Progress Measures</title><link>/language-reference/system-description/system-definition/progress-measures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/system-definition/progress-measures/</guid><description>&lt;p>A progress measure is an expression that defines progress in the model. It should be weakly monotonically increasing, although occasional decreasses are acceptable. E.g. sequence numbers used in communication protocols might be used to define a progress measure, provided that the sequence number does not overflow to often.&lt;/p>
&lt;p>If progress measures are defined, UPPAAL uses the generalized sweepline method to reduce the memory usage. However to be efficient, the domain of a progress measure should not be too large - otherwise performance might degrade significantly.&lt;/p></description></item><item><title>Specifying Test Code</title><link>/gui-reference/yggdrasil/test-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/yggdrasil/test-code/</guid><description>&lt;p>Traces are translated into executable test cases based on test code entered into the model. The test code is entered as verbatim text, so any language or execution back-end can be used. Test code can be entered in five areas: Prefix code, location enter code, location exit code, edge code, and postfix code. Each test case starts with the prefix code, continues with test code along the locations and edges of the trace and ends with the postfix code.&lt;/p></description></item><item><title>Syntax of Statistical Queries</title><link>/language-reference/query-syntax/statistical_queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/query-syntax/statistical_queries/</guid><description>&lt;h2 id="statistical-queries">Statistical Queries&lt;/h2>
&lt;p>Statistical queries are decided using concrete semantics of stochastic hybrid automata over a number of bounded concrete simulation runs and correspond to empirical measurements of the system performance. The results are of statistical estimate nature and may vary across different executions based on uncertainties specified in &lt;a href="/gui-reference/menu-bar/options/#statparam">Statistical parameters&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-EBNF" data-lang="EBNF">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SMCQuery &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::&lt;/span>&lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#66d9ef">Simulate Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">Probability Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">ProbUntil Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">Probability &lt;/span>( &lt;span style="color:#e6db74">&amp;#39;&amp;lt;=&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;&amp;gt;=&amp;#39;&lt;/span> ) &lt;span style="color:#66d9ef">PROB Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">Probability Subjection &lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;gt;=&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Probability Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#66d9ef">Estimate Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Simulate &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;simulate&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">SMCBounds &lt;/span>&lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">List &lt;/span>&lt;span style="color:#e6db74">&amp;#39;}&amp;#39;&lt;/span> [ &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> [ &lt;span style="color:#66d9ef">SATRUNS &lt;/span>&lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> ] &lt;span style="color:#66d9ef">Expression &lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Probability &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;Pr&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">MITLExpression&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | &lt;span style="color:#e6db74">&amp;#39;Pr[&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">SMCBounds &lt;/span>&lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">PathType Expression &lt;/span>&lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ProbUntil &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Pr[&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">SMCBounds &lt;/span>&lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Expression &lt;/span>&lt;span style="color:#e6db74">&amp;#39;U&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Expression &lt;/span>&lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Estimate &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;E[&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">SMCBounds &lt;/span>&lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;min:&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;max:&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">Expression &lt;/span>&lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SMCBounds &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#66d9ef">BoundType &lt;/span>[ ; &lt;span style="color:#66d9ef">RUNS &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">BoundType &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::&lt;/span>&lt;span style="color:#f92672">=&lt;/span> ( | &lt;span style="color:#66d9ef">Clock &lt;/span>| &lt;span style="color:#e6db74">&amp;#39;#&amp;#39;&lt;/span> ) &lt;span style="color:#e6db74">&amp;#39;&amp;lt;=&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">BOUND&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">PathType &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> ( &lt;span style="color:#e6db74">&amp;#39;&amp;lt;&amp;gt;&amp;#39;&lt;/span> | &lt;span style="color:#e6db74">&amp;#39;[]&amp;#39;&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Subjection &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#960050;background-color:#1e0010">//&lt;/span> &lt;span style="color:#66d9ef">empty for no subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 | &lt;span style="color:#66d9ef">under StrategyName&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;dl>
&lt;dt>&lt;tt>BOUND&lt;/tt>&lt;/dt>
&lt;dd>is a non-negative integer constant denoting an upper bound over the absolute global time (when a variable is not specified), specific &lt;tt>Clock&lt;/tt> (cost) variable or a number of action-transitions (&lt;tt>#&lt;/tt>).&lt;/dd>
&lt;dt>&lt;tt>RUNS&lt;/tt>&lt;/dt>
&lt;dd>is an optional positive integer constant denoting the maximum number of runs. If the number of runs is not specified, then it is decided based on &lt;a href="/gui-reference/menu-bar/options/#statparam">Statistical parameters&lt;/a> and the particular estimation algorithm.&lt;/dd>
&lt;dt>&lt;tt>SATRUNS&lt;/tt>&lt;/dt>
&lt;dd>is an optional positive integer constant denoting the maximum number of runs that satisfy the state expression.&lt;/dd>
&lt;dt>&lt;tt>PROB&lt;/tt>&lt;/dt>
&lt;dd>is a floating point number from interval &lt;tt>[0; 1]&lt;/tt> denoting a probability bound.&lt;/dd>
&lt;dt>&lt;tt>&amp;rsquo;#&amp;rsquo;&lt;/tt>&lt;/dt>
&lt;dd>means a number of simulation steps &amp;ndash; discrete edge-transitions &amp;ndash; in the run.&lt;/dd>
&lt;dt>&lt;tt>&amp;lsquo;min:&amp;rsquo;&lt;/tt>&lt;/dt>
&lt;dd>means the minimum value over a run of the proceeding expression.&lt;/dd>
&lt;dt>&lt;tt>&amp;lsquo;max:&amp;rsquo;&lt;/tt>&lt;/dt>
&lt;dd>means the maximum value over a run of the proceeding expression.&lt;/dd>
&lt;/dl>
&lt;p>All expressions are state predicates and must be side effect free. It is possible to test whether a certain process is in a given location using expressions on the form &lt;tt>process.location&lt;/tt>.&lt;/p></description></item><item><title>Tool Bar</title><link>/gui-reference/toolbar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/toolbar/</guid><description>&lt;p>The tool bar is normally located just below the &lt;a href="/gui-reference/menu-bar/">menu bar&lt;/a> but can be moved (using the mouse) to other positions or even to a separate window. The tool bar is divided into four groups. The three leftmost groups provide quick access to some of the most frequently used menu items. The rightmost group contains editing tools.&lt;/p>
&lt;p>&lt;img src="/gui-reference/uppaal-toolbar.png" alt="UPPAAL Toolbar">&lt;/p>
&lt;p>The first group contains the following buttons: &lt;em>New&lt;/em>, &lt;em>Open Project&lt;/em>, and &lt;em>Save&lt;/em>. These features are described in the &lt;a href="/gui-reference/menu-bar/file/">File menu&lt;/a> section.&lt;/p></description></item><item><title>Variables Panel</title><link>/gui-reference/concrete-simulator/variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/concrete-simulator/variables/</guid><description>&lt;p>The variables panel is the middle panel of the simulator. It displays the values of the data and clock variables in the current state or transition selected in the trace of the &lt;a href="../simulation-control/">simulation control&lt;/a> panel.&lt;/p></description></item><item><title>Verifying Requirements</title><link>/gui-reference/verifier/verifying/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/verifier/verifying/</guid><description>&lt;p>The queries (i.e. the system requirements) are verified from the verifier interface of UPPAAL. A verification is always performed according to the settings specified in the &lt;a href="/gui-reference/menu-bar/options/">Options menu&lt;/a> of the main menu bar.&lt;/p>
&lt;p>The selected queries are verified when the button named &lt;em>Check&lt;/em> is pressed. The verification progress dialog displays the progress of how many queries have been verified, what is the current load of a passed-waiting list, current processor time usage (the time spent for verification is in blue, the time spent by operating system is in red), current usage of host&amp;rsquo;s random access memory (verification memory is in blue, memory used by other running processes is in gray and operating system cache and buffers are in yellow), swap disk usage (swapped out verification is in blue, other is in grey). Note that resource figures do not include the overhead of UPPAAL GUI and command line utilities (like &lt;tt>memtime&lt;/tt> run on &lt;tt>verifyta&lt;/tt>) are more accurate. Some figures are not available on some OSes (system cache allocation is not documented on Windows API and swap usage per process is not maintained by Linux kernel), therefore they might not show up.&lt;/p></description></item><item><title>verifyta</title><link>/toolsandapi/verifyta/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/toolsandapi/verifyta/</guid><description>&lt;p>The verifier functionality is accessible through &lt;code>verifyta&lt;/code> command line utility in &lt;code>bin&lt;/code> directory of the UPPAAL distribution.&lt;/p>
&lt;p>The supported options are displayed when running &lt;code>verifyta -h&lt;/code> or &lt;code>verifyta --help&lt;/code>.&lt;/p></description></item><item><title>Syntax of Learning Queries</title><link>/language-reference/query-syntax/learning_queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/query-syntax/learning_queries/</guid><description>&lt;h2 id="learning-queries">Learning Queries&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-EBNF" data-lang="EBNF">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">LearningQuery &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::&lt;/span>&lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">ExpQuantifier &lt;/span>&lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Expression &lt;/span>&lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;[&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">BoundType &lt;/span>&lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Features&lt;/span>? &amp;#39;:&amp;#39; PathType Expression Subjection
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 | ExpQuantifier &amp;#39;[&amp;#39; BoundType &amp;#39;]&amp;#39; Features? &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">PathType Expression Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 | &lt;span style="color:#66d9ef">ExpPrQuantifier &lt;/span>&lt;span style="color:#e6db74">&amp;#39;[&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">BoundType &lt;/span>&lt;span style="color:#e6db74">&amp;#39;]&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Features&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">?&lt;/span> &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">PathType Expression Subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ExpQuantifier &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> ( &lt;span style="color:#66d9ef">minE &lt;/span>| &lt;span style="color:#66d9ef">maxE &lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ExpPrQuantifier &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> ( &lt;span style="color:#66d9ef">minPr &lt;/span>| &lt;span style="color:#66d9ef">maxPr &lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Features &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">List &lt;/span>&lt;span style="color:#e6db74">&amp;#39;}&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;-&amp;gt;&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">List &lt;/span>&lt;span style="color:#e6db74">&amp;#39;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Subjection &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#960050;background-color:#1e0010">//&lt;/span> &lt;span style="color:#66d9ef">empty for no subjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 | &lt;span style="color:#66d9ef">under StrategyName&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;dl>
&lt;dt>&lt;code>Features&lt;/code>&lt;/dt>
&lt;dd>describes a mapping (state space partition) from a partial state to a player action. The first list maps in the discrete space (values interpreted as distinct categories) and the second list maps in continuous space (assumes distance between values: similar values yield similar cost).&lt;/dd>
&lt;/dl>
&lt;p>See &lt;a href="/grammar/#LearnQuery">rail road diagram for the entire LearningQuery syntax&lt;/a>.&lt;/p></description></item><item><title>Declarations</title><link>/gui-reference/system-editor/declarations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/system-editor/declarations/</guid><description>&lt;p>Types, constants, variables and functions can be defined in the global scope by placing them in the global section labelled &lt;em>Declarations&lt;/em> or &lt;em>System declarations&lt;/em>, or locally for a template by placing in the &lt;em>Declarations&lt;/em> section of a template.&lt;/p>
&lt;p>Processes are instantiated by placing a &lt;a href="../System_Descriptions/Process_Assignments.html">process assignments&lt;/a> in the &lt;em>System declarations&lt;/em> section.&lt;/p>
&lt;p>Finally, the system is defined as a parallel composition of a number of processes by placing a system declaration in the &lt;em>System declarations&lt;/em> section.&lt;/p></description></item><item><title>External Functions</title><link>/language-reference/system-description/declarations/external-functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/declarations/external-functions/</guid><description>&lt;div class="notices info" >&lt;p>The external functions are supported since Uppaal Stratego version 4.1.20-7, or Uppaal version 5.0 or later.&lt;/p>
&lt;/div>


&lt;div class="notices info" >&lt;p>External Functions is an expert user feature and requires a high-level understanding of dynamic library loading and linking.&lt;br>
The feature is supported on Linux and experimental on Windows and macOS.&lt;/p>
&lt;/div>


&lt;div class="notices warning" >&lt;p>The external function calls must be &lt;em>&lt;strong>deterministic&lt;/strong>&lt;/em>: for any argument values, the function should produce the same result at any time when called with the same values.&lt;br>
For example:&lt;/p></description></item><item><title>Gantt Chart</title><link>/language-reference/system-description/system-definition/gantt-chart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/system-definition/gantt-chart/</guid><description>&lt;p>A Gantt chart, commonly used in project management, is a bar chart that shows activities displayed against time. On the left of the chart is a list of the activities and along the top is a suitable time scale. Each activity is represented by a bar; the position and length of the bar reflect the start date, duration and end date of the activity.&lt;/p>
&lt;p>In UPPAAL Gantt Charts are used to automatic visualize traces in &lt;a href="/gui-reference/concrete-simulator">Concrete Simulator&lt;/a>. One needs to specify the list of activities and for each activity, what the different colored parts of the bar should reflect.&lt;/p></description></item><item><title>Java API</title><link>/toolsandapi/javaapi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/toolsandapi/javaapi/</guid><description>&lt;p>UPPAAL models can be created, loaded, saved, simulated and properties checked using &lt;code>libs/model.jar&lt;/code> library. There is also javadoc documentation included in &lt;code>libs/model-javadoc.jar&lt;/code>.&lt;/p>
&lt;p>A demonstrating example is included in the &lt;code>demo/ModelDemo.java&lt;/code> file of UPPAAL distribution.&lt;/p></description></item><item><title>Parameters</title><link>/language-reference/system-description/parameters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/parameters/</guid><description>&lt;p>Templates and functions are parameterised. The syntax for parameters is defined by the grammar for &lt;tt>Parameters&lt;/tt>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-EBNF" data-lang="EBNF">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Parameters &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::&lt;/span>&lt;span style="color:#f92672">=&lt;/span> [ &lt;span style="color:#66d9ef">Parameter &lt;/span>(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Parameter&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">*&lt;/span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Parameter &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span> [&lt;span style="color:#66d9ef">Type&lt;/span>] [ &lt;span style="color:#e6db74">&amp;#39;&amp;amp;&amp;#39;&lt;/span> ] [&lt;span style="color:#66d9ef">ID&lt;/span>] [&lt;span style="color:#66d9ef">ArrayDecl&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In contrast to global and local declarations, the parameter list should not be terminated by a semicolon.&lt;/p>
&lt;h2 id="call-by-reference-and-call-by-value">Call by Reference and Call by Value&lt;/h2>
&lt;p>Parameters can be declared to have either call-by-value or call-by-reference semantics. The syntax is taken from C++, where the identifier of a call-by-reference parameter is prefixed with an ampersand in the parameter declaration. Call-by-value parameters are not prefixed with an ampersand.&lt;/p></description></item><item><title>Process Panel</title><link>/gui-reference/concrete-simulator/process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/concrete-simulator/process/</guid><description>&lt;p>The process panel is the rightmost upper panel of the simulator. It displays the process instances of the system descriptions. A red token marks the current control point of each automaton. One or more of the automata edges may also be red to indicate the transition currently selected in the simulation control panel.&lt;/p>
&lt;p>Clicking inside a process box with the right mouse button opens a pop-up menu with the following items:&lt;/p></description></item><item><title>Simulation Control</title><link>/gui-reference/symbolic-simulator/simulation-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/symbolic-simulator/simulation-control/</guid><description>&lt;p>The simulation control is the left panel of the simulator. It is used to control the simulation and to select the (symbolic) state or transition to be visualized in the other two panels of the simulator. The control panel is divided in two parts:&lt;/p>
&lt;p>The upper part is used for performing step-by-step simulation. A list view displays the enabled transitions, with the currently selected transition highlighted. Pressing the &lt;em>Next&lt;/em>-button causes the simulated system to take the selected transition. The &lt;em>Reset&lt;/em>-button is used to reset the simulated system to its initial state.&lt;/p></description></item><item><title>Syntax of Strategy Queries</title><link>/language-reference/query-syntax/strategy_queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/query-syntax/strategy_queries/</guid><description>&lt;h2 id="strategy-queries">Strategy Queries&lt;/h2>
&lt;p>Strategy queries allow store, load, reuse and refine the strategies by assigning names to them.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-EBNF" data-lang="EBNF">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">AssignQuery &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::&lt;/span>&lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#e6db74">&amp;#39;strategy&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">StrategyName &lt;/span>&lt;span style="color:#e6db74">&amp;#39;=&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">AssignableQuery&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">AssignableQuery &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">ControlQuery&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 | &lt;span style="color:#66d9ef">LearningQuery&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 | &lt;span style="color:#e6db74">&amp;#39;loadStrategy&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Features &lt;/span>&lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Path &lt;/span>&lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">NonAssignableQuery &lt;/span>&lt;span style="color:#960050;background-color:#1e0010">::=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">SymbolicQuery&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 | &lt;span style="color:#66d9ef">SMCQuery&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 | &lt;span style="color:#e6db74">&amp;#39;saveStrategy&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;(&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">Path &lt;/span>&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">StrategyName &lt;/span>&lt;span style="color:#e6db74">&amp;#39;)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;dl>
&lt;dt>&lt;tt>StrategyName&lt;/tt>&lt;/dt>
&lt;dd>indicates the name of a strategy.&lt;/dd>
&lt;dt>&lt;tt>Path&lt;/tt>&lt;/dt>
&lt;dd>is a double-quoted (using &lt;code>&amp;quot;&lt;/code>) character sequence (string) denoting a file path on the same computer as the used engine (&lt;code>server&lt;/code> or &lt;code>verifyta&lt;/code>).&lt;br>
Note that the backslash (&lt;code>\&lt;/code>) character in (Windows) paths needs to be either escaped with another backslash or replaced with the forwardslash (&lt;code>/&lt;/code>), i.e. &lt;code>\&lt;/code> should be replaced with either &lt;code>\\&lt;/code> or &lt;code>/&lt;/code>.&lt;/dd>
&lt;/dl>
&lt;p>See &lt;a href="/grammar/#Query">rail road diagram of AssignableQuery in Query overview&lt;/a>.&lt;/p></description></item><item><title>Variables Panel</title><link>/gui-reference/symbolic-simulator/variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/symbolic-simulator/variables/</guid><description>&lt;p>The variables panel is the middle panel of the simulator. It displays the values of the data and clock variables in the current state or transition selected in the trace of the &lt;a href="../simulation-control/">simulation control&lt;/a> panel.&lt;/p>
&lt;p>The data variable values are always shown as integers. The clock values are shown symbolically as a conjunction of clock guards of lower and upper bounds on individual clocks or differences between pairs of clocks (see &lt;a href="/language-reference/expressions/">Expressions&lt;/a> section for more information on clock guards). The possible clock values of the associated state (or transition) are all possible solutions to the conjunction of all clock constraints. The symbols &amp;ldquo;[&amp;rdquo; and &amp;ldquo;]&amp;rdquo; are used for closed intervals and &amp;ldquo;(&amp;rdquo; and &amp;ldquo;)&amp;rdquo; for open intervals in the usual way.&lt;/p></description></item><item><title>View Menu</title><link>/gui-reference/menu-bar/view/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/menu-bar/view/</guid><description>&lt;p>The view menu is used to modify the appearance of the system currently shown in the &lt;a href="/gui-reference/system-editor/">system editor&lt;/a> and the &lt;a href="gui-reference/symbolic-simulator/">simulator&lt;/a>. The items are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Zoom:&lt;/strong> shows a sub menu with fixed zoom values, zoom to fit, and itemes for zooming in, out, or to normal size. A change in the zoom value affects the templates the editor or the processes in the simulator (if one of the tools is active).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Labels:&lt;/strong> shows a sub menu from which one can select which type of labels should be shown in the drawing area. Even when hidden, all labels can be seen in the tooltip of locations and edges.&lt;/p></description></item><item><title>Confidence Intervals</title><link>/language-reference/query-semantics/smc_queries/ci_estimation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/query-semantics/smc_queries/ci_estimation/</guid><description>&lt;p>Probability estimation query &lt;tt>Pr[&amp;hellip;](&amp;lt;&amp;gt; q)&lt;/tt> yields a confidence interval (CI) for the probability of the state expression &lt;tt>q&lt;/tt> being true with the confidence level of &lt;tt>1-α&lt;/tt>. For example, it could be &lt;tt>[0.45, 0.55]&lt;/tt> (&lt;tt>95%&lt;/tt> CI), or could be written as &lt;tt>0.5 ± 0.05&lt;/tt> (&lt;tt>95%&lt;/tt> CI), where &lt;tt>ε=0.05&lt;/tt> and &lt;tt>α=0.05&lt;/tt>.&lt;/p>
&lt;p>The frequentist interpretation of CI is that there exists a true probability that the state expression &lt;tt>q&lt;/tt> is true and it is included in that confidence interval, but there is a risk α of making an error (the true probability being outside the confidence interval).&lt;/p></description></item><item><title>Message Sequence Chart</title><link>/gui-reference/concrete-simulator/sequence-chart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/concrete-simulator/sequence-chart/</guid><description>&lt;p>The Message Sequence Chart (MSC) panel is the lower rightmost panel of the simulator. It displays an MSC view of the generated trace (also displayed in the &lt;a href="../simulation-control/">simulation control panel&lt;/a> of the simulator).&lt;/p>
&lt;p>In the MSC view there is a vertical line for each process, and a horizontal line for each synchronisation point. The process name of each vertical line is indicated in the upper part of the MSC panel. The node names shown on the vertical lines indicate the control location of the automaton. If the mouse is placed over the MSC all control location names at the position are shown. If a position is selected, the &lt;a href="../process/">process panel&lt;/a> and the &lt;a href="../simulation-control/">simulation control&lt;/a> panel are updated accordingly.&lt;/p></description></item><item><title>Process Panel</title><link>/gui-reference/symbolic-simulator/process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/symbolic-simulator/process/</guid><description>&lt;p>The process panel is the rightmost upper panel of the simulator. It displays the process instances of the system descriptions. A red token marks the current control point of each automaton. One or more of the automata edges may also be red to indicate the transition currently selected in the simulation control panel.&lt;/p>
&lt;p>Clicking inside a process box with the right mouse button opens a pop-up menu with the following items:&lt;/p></description></item><item><title>Reserved Keywords</title><link>/language-reference/reserved-keywords/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/reserved-keywords/</guid><description>&lt;p>The reserved keywords that should not be used as &lt;a href="/language-reference/expressions/identifiers/">identifier names&lt;/a> when defining systems are: &lt;tt>chan&lt;/tt>, &lt;tt>clock&lt;/tt>, &lt;tt>double&lt;/tt>, &lt;tt>bool&lt;/tt>, &lt;tt>int&lt;/tt>, &lt;tt>commit&lt;/tt>, &lt;tt>const&lt;/tt>, &lt;tt>urgent&lt;/tt>, &lt;tt>broadcast&lt;/tt>, &lt;tt>init&lt;/tt>, &lt;tt>process&lt;/tt>, &lt;tt>state&lt;/tt>, &lt;tt>invariant&lt;/tt>, &lt;tt>location&lt;/tt>, &lt;tt>guard&lt;/tt>, &lt;tt>sync&lt;/tt>, &lt;tt>assign&lt;/tt>, &lt;tt>system&lt;/tt>, &lt;tt>trans&lt;/tt>, &lt;tt>deadlock&lt;/tt>, &lt;tt>and&lt;/tt>, &lt;tt>or&lt;/tt>, &lt;tt>not&lt;/tt>, &lt;tt>imply&lt;/tt>, &lt;tt>true&lt;/tt>, &lt;tt>false&lt;/tt>, &lt;tt>for&lt;/tt>, &lt;tt>forall&lt;/tt>, &lt;tt>exists&lt;/tt>, &lt;tt>while&lt;/tt>, &lt;tt>do&lt;/tt>, &lt;tt>if&lt;/tt>, &lt;tt>else&lt;/tt>, &lt;tt>return&lt;/tt>, &lt;tt>typedef&lt;/tt>, &lt;tt>struct&lt;/tt>, &lt;tt>rate&lt;/tt>, &lt;tt>before_update&lt;/tt>, &lt;tt>after_update&lt;/tt>, &lt;tt>meta&lt;/tt>, &lt;tt>priority&lt;/tt>, &lt;tt>progress&lt;/tt>, &lt;tt>scalar&lt;/tt>, &lt;tt>select&lt;/tt>, &lt;tt>void&lt;/tt>, &lt;tt>default&lt;/tt>, &lt;tt>string&lt;/tt>, &lt;tt>minE&lt;/tt>, &lt;tt>maxE&lt;/tt>, &lt;tt>Pr&lt;/tt>.&lt;/p>
&lt;p>The following keywords are reserved for future use: &lt;tt>switch&lt;/tt>, &lt;tt>case&lt;/tt>, &lt;tt>continue&lt;/tt>, &lt;tt>break&lt;/tt>, &lt;tt>enum&lt;/tt>.&lt;/p></description></item><item><title>Socketserver</title><link>/toolsandapi/socketserver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/toolsandapi/socketserver/</guid><description>&lt;p>To start a remote server, use the &lt;code>socketserver&lt;/code> binary (included for Linux, macOS, SunOS).
To use the remote server, see the section on &lt;a href="/gui-reference/menu-bar/edit/">Edit &amp;gt; Engine&lt;/a> for the GUI.&lt;/p>
&lt;p>The &lt;code>socketserver&lt;/code> can be run from the command line on a remote machine using one of the following commands:&lt;/p>
&lt;pre tabindex="0">&lt;code>Synopsis:
 socketserver [-n] [-p&amp;lt;P1&amp;gt;] [command]...
 socketserver -h
 h : Print this help screen
 n : Run in native mode
 p : Set port in server mode (default is 2350)
 d : Write communication to debug files in current directory
 m : Write communication standard out
 [commmand] : A series of argv to execute as the server command
&lt;/code>&lt;/pre>&lt;p>The available command line options are:&lt;/p></description></item><item><title>Tools Menu</title><link>/gui-reference/menu-bar/tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/menu-bar/tools/</guid><description>&lt;p>The tools menu contains a set of tools useful in the &lt;a href="/gui-reference/system-editor/">system edtior&lt;/a>. The items are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Check Syntax:&lt;/strong> checks if syntax and types are correct in the edited system. Any found errors and warnings are listed in the lower part of the &lt;a href="/gui-reference/system-editor/drawing/">drawing area&lt;/a> of the system editor, and (when applicable) underlinded in the automata.&lt;/li>
&lt;li>&lt;strong>Convert Syntax:&lt;/strong> assists in convering a system complying with the syntax used in UPPAAL 3.4 to the current syntax.&lt;/li>
&lt;li>&lt;strong>Align to Grid:&lt;/strong> makes all existing objects of the current template align to the specified drawing grid.&lt;/li>
&lt;li>&lt;strong>Plot Composer:&lt;/strong> creates a new &lt;a href="../Verifier/PlotComposer.html">Plot Composer&lt;/a> window to superimpose multiple results from statistical model checking in the &lt;a href="/gui-reference/verifier/">Verifier&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title>File Formats</title><link>/toolsandapi/file-formats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/toolsandapi/file-formats/</guid><description>&lt;p>UPPAAL supports three file formats for models: XML, XTA and TA. XML and XTA files can be loaded and stored via the &lt;strong>Open Project&lt;/strong>, &lt;strong>Open System&lt;/strong>, &lt;strong>Save System&lt;/strong>, and &lt;strong>Save System As&lt;/strong> menus. When saving a file, the file type is determined by the file name extension used. Each format is explained in more details below.&lt;/p>
&lt;p>Notice that the above mentioned file formats are mostly independent from the type of changes made to the syntax between UPPAAL 3.4 and UPPAAL 4.0.&lt;/p></description></item><item><title>Gantt Chart Panel</title><link>/gui-reference/concrete-simulator/gantt-chart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/concrete-simulator/gantt-chart/</guid><description>&lt;p>The Gantt Chart panel is the middle rightmost panel of the simulator. It displays another view of the generated trace according to the Gantt Chart specification given in &lt;a href="/language-reference/system-description/system-definition/">system definition&lt;/a>.&lt;/p>
&lt;p>In the Gantt Chart view, the horizontal axis represents the time span, and in the vertical axis the list of activities (usually some of the system processes) defined in the Gantt chart specification are listed. A vertical line is used to represent the current time (which corresponds to the one displayed in the &lt;em>Simulation Trace&lt;/em>-combo box). Horizontal bars of varying lengths and colors represent when the different expressions in the Gantt chart specification are satisfied according to the current state of the trace.&lt;/p></description></item><item><title>Message Sequence Chart</title><link>/gui-reference/symbolic-simulator/sequence-charts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/symbolic-simulator/sequence-charts/</guid><description>&lt;p>The Message Sequence Chart (MSC) panel is the lower rightmost panel of the simulator. It displays an MSC view of the generated trace (also displayed in the &lt;a href="../simulation-control/">simulation control panel&lt;/a> of the simulator).&lt;/p>
&lt;p>In the MSC view there is a vertical line for each process, and a horizontal line for each synchronisation point. The process name of each vertical line is indicated in the upper part of the MSC panel. The node names shown on the vertical lines indicate the control location of the automaton. If the mouse is placed over the MSC all control location names at the position are shown. If a position is selected, the &lt;a href="../process/">process panel&lt;/a> and the &lt;a href="../simulation-control/">simulation control&lt;/a> panel are updated accordingly.&lt;/p></description></item><item><title>Options Menu</title><link>/gui-reference/menu-bar/options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/menu-bar/options/</guid><description>&lt;p>The options menu contains settings to control the behavior of the model-checker.&lt;/p>
&lt;h2 id="search-order">Search Order&lt;/h2>
&lt;p>This option influences the order in which the state space is explored.&lt;/p>
&lt;dl>
&lt;dt>Breadth first&lt;/dt>
&lt;dd>Search the state space in breadth first search order. This is typically the most efficient option when the complete state space must be searched. When generating shortest or fastest traces, this is likely the best setting.&lt;/dd>
&lt;dt>Depth first&lt;/dt>
&lt;dd>Search the state space in depth first search order. If a counter example or witnessing trace is expected to exist, this setting is usually better than the breadth first setting. It is not recommended to use this search order when generating shortest or fastest traces.&lt;/dd>
&lt;dt>Random depth first&lt;/dt>
&lt;dd>Search the state space in randomised depth first search order. If a counter example or witnessing trace is expected to exist, this is usually the best setting. Due to the randomisation, traces may vary from run to run. It is not recommended to use this search order when generating shortest or fastest traces.&lt;/dd>
&lt;/dl>
&lt;h2 id="state-space-reduction">State Space Reduction&lt;/h2>
&lt;p>When searching the state space, UPPAAL does not necessarily have to store all states in memory in order to guarantee termination. This option influences how aggressively UPPAAL tries to avoid storing states. There is normally a tradeoff between space and speed.&lt;/p></description></item><item><title>Priorities</title><link>/language-reference/system-description/priorities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/priorities/</guid><description>&lt;p>Given some priority order on the transitions, the intuition is that, at a given time-point, a transition is enabled only if no higher priority transition is enabled (see also &lt;a href="../semantics/">Semantics&lt;/a>.) We say that the higher priority transition &lt;em>blocks&lt;/em> the lower priority transition.&lt;/p>
&lt;p>Priorities can be assigned to the channels and processes of a system. The priority orders defined in the system are translated into a priority order on tau-transitions and synchronizing transitions. &lt;em>Delay transitions are still non-deterministic&lt;/em> (unless urgent channels are used.)&lt;/p></description></item><item><title>Help Menu</title><link>/gui-reference/menu-bar/help/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/menu-bar/help/</guid><description>&lt;p>The &lt;strong>help&lt;/strong> menu has two items: Help which opens a separate window showing the help pages, and &lt;strong>About&lt;/strong> which opens a window showing the version number and information about the copyrights of UPPAAL.&lt;/p></description></item><item><title>Latex</title><link>/toolsandapi/latex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/toolsandapi/latex/</guid><description>&lt;p>UPPAAL web site includes links to uppaal.sty file — style for typesetting documents in LaTeX.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/DEIS-Tools/uppaal-latex">UPPAAL Latex&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Scope Rules</title><link>/language-reference/system-description/scope-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/scope-rules/</guid><description>&lt;p>The scope rules determine which element a name refers to in a given context. The context is either local (to a process template), or global (in a system description).&lt;/p>
&lt;p>In a local context, the names are always referring to local declarations or formal parameters (if the name is locally defined), otherwise to a globally declared name.&lt;/p>
&lt;p>In the global context, a name is always referring to a global declaration.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> There is only one name space in each context. This means that in each context all declared clocks, integer variables, constants, locations, and formal paramters must have unique names. However, local names may shadow globally declared names.&lt;/p></description></item><item><title>Semantics</title><link>/language-reference/system-description/semantics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/language-reference/system-description/semantics/</guid><description>&lt;p>In the following we give a pseudo-formal semantics for UPPAAL. The semantics defines a timed transition system (&lt;em>S, s&lt;sub>0&lt;/sub>,&lt;/em> →) describing the behaviour of a network of extended timed automata. The set of states &lt;em>S&lt;/em> is defined as {(&lt;em>L, v&lt;/em>) | &lt;em>v ⊨ Inv&lt;/em>(&lt;em>L&lt;/em>)}, where &lt;em>L&lt;/em> is a location vector, &lt;em>v&lt;/em> is a function (called a &lt;em>valuation&lt;/em>) mapping integer variables and clocks to their values, and &lt;em>Inv&lt;/em> is a function mapping locations and location vectors to invariants. The initial state &lt;em>s&lt;sub>0&lt;/sub>&lt;/em> is the state where all processes are in the initial location, all variables have their initial value, and all clocks are zero. The transition relation, →, contains two kinds of transitions: delay transitions and action transitions. We will describe each type below.&lt;/p></description></item><item><title>Symbolic Traces</title><link>/gui-reference/symbolic-simulator/symbolic-traces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/gui-reference/symbolic-simulator/symbolic-traces/</guid><description>&lt;p>Since clocks range over the non-negative reals, timed automata can have infinitely many states (not to be confused with locations) and infinitely many traces. The simulator cannot visualize all these concrete traces. Instead it shows an infinite set of traces - a so called symbolic trace. Each symbolic state of a symbolic trace is a set of states and their delay successors described by a number of &lt;a href="../variables/">constraints on the clocks&lt;/a>. In a given symbolic state, the active locations and the values of discrete variables are the same for all states.&lt;/p></description></item></channel></rss>